#include <iostream>
class Vector {
private:
    double x, y, z;
public:
    Vector(double x, double y, double z) {
        this->x = x;
        this->y = y;
        this->z = z;
    }
    Vector operator+(const Vector& other) {
        return Vector(x + other.x, y + other.y, z + other.z);
    }
    Vector operator-(const Vector& other) {
        return Vector(x - other.x, y - other.y, z - other.z);
    }
    double dot(const Vector& other) {
        return x * other.x + y * other.y + z * other.z;
    }
    friend std::ostream& operator<<(std::ostream& os, const Vector& vector);
};
std::ostream& operator<<(std::ostream& os, const Vector& vector) {
    os << "(" << vector.x << ", " << vector.y << ", " << vector.z << ")";
    return os;
}
int main() {
    Vector v1(1, 2, 3);
    Vector v2(4, 5, 6);
    Vector v3 = v1 + v2;
    std::cout << "Сумма векторов: " << v3 << std::endl;
    Vector v4 = v2 - v1;
    std::cout << "Разность векторов: " << v4 << std::endl;
    double dot_product = v1.dot(v2);
    std::cout << "Скалярное произведение: " << dot_product << std::endl;
    return 0;
}
